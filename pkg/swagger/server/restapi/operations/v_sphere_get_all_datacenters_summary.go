// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// VSphereGetAllDatacentersSummaryHandlerFunc turns a function with the right signature into a v sphere get all datacenters summary handler
type VSphereGetAllDatacentersSummaryHandlerFunc func(VSphereGetAllDatacentersSummaryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VSphereGetAllDatacentersSummaryHandlerFunc) Handle(params VSphereGetAllDatacentersSummaryParams) middleware.Responder {
	return fn(params)
}

// VSphereGetAllDatacentersSummaryHandler interface for that can handle valid v sphere get all datacenters summary params
type VSphereGetAllDatacentersSummaryHandler interface {
	Handle(VSphereGetAllDatacentersSummaryParams) middleware.Responder
}

// NewVSphereGetAllDatacentersSummary creates a new http.Handler for the v sphere get all datacenters summary operation
func NewVSphereGetAllDatacentersSummary(ctx *middleware.Context, handler VSphereGetAllDatacentersSummaryHandler) *VSphereGetAllDatacentersSummary {
	return &VSphereGetAllDatacentersSummary{Context: ctx, Handler: handler}
}

/*
	VSphereGetAllDatacentersSummary swagger:route GET /vsphere/{vcenter}/datacenter vSphereGetAllDatacentersSummary

Gets the datacenters.
*/
type VSphereGetAllDatacentersSummary struct {
	Context *middleware.Context
	Handler VSphereGetAllDatacentersSummaryHandler
}

func (o *VSphereGetAllDatacentersSummary) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVSphereGetAllDatacentersSummaryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
