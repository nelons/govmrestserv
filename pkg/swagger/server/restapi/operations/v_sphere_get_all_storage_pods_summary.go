// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// VSphereGetAllStoragePodsSummaryHandlerFunc turns a function with the right signature into a v sphere get all storage pods summary handler
type VSphereGetAllStoragePodsSummaryHandlerFunc func(VSphereGetAllStoragePodsSummaryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VSphereGetAllStoragePodsSummaryHandlerFunc) Handle(params VSphereGetAllStoragePodsSummaryParams) middleware.Responder {
	return fn(params)
}

// VSphereGetAllStoragePodsSummaryHandler interface for that can handle valid v sphere get all storage pods summary params
type VSphereGetAllStoragePodsSummaryHandler interface {
	Handle(VSphereGetAllStoragePodsSummaryParams) middleware.Responder
}

// NewVSphereGetAllStoragePodsSummary creates a new http.Handler for the v sphere get all storage pods summary operation
func NewVSphereGetAllStoragePodsSummary(ctx *middleware.Context, handler VSphereGetAllStoragePodsSummaryHandler) *VSphereGetAllStoragePodsSummary {
	return &VSphereGetAllStoragePodsSummary{Context: ctx, Handler: handler}
}

/*
	VSphereGetAllStoragePodsSummary swagger:route GET /vsphere/{vcenter}/storagepod vSphereGetAllStoragePodsSummary

Gets the hosts found at the endpoint.
*/
type VSphereGetAllStoragePodsSummary struct {
	Context *middleware.Context
	Handler VSphereGetAllStoragePodsSummaryHandler
}

func (o *VSphereGetAllStoragePodsSummary) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVSphereGetAllStoragePodsSummaryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
