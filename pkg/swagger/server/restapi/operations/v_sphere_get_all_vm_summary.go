// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VSphereGetAllVMSummaryHandlerFunc turns a function with the right signature into a v sphere get all VM summary handler
type VSphereGetAllVMSummaryHandlerFunc func(VSphereGetAllVMSummaryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VSphereGetAllVMSummaryHandlerFunc) Handle(params VSphereGetAllVMSummaryParams) middleware.Responder {
	return fn(params)
}

// VSphereGetAllVMSummaryHandler interface for that can handle valid v sphere get all VM summary params
type VSphereGetAllVMSummaryHandler interface {
	Handle(VSphereGetAllVMSummaryParams) middleware.Responder
}

// NewVSphereGetAllVMSummary creates a new http.Handler for the v sphere get all VM summary operation
func NewVSphereGetAllVMSummary(ctx *middleware.Context, handler VSphereGetAllVMSummaryHandler) *VSphereGetAllVMSummary {
	return &VSphereGetAllVMSummary{Context: ctx, Handler: handler}
}

/*
	VSphereGetAllVMSummary swagger:route GET /vsphere/{vcenter}/vm/ vSphereGetAllVmSummary

Retrieve a summary of all Virtual Machines from a vCenter Server/ESXi host.
*/
type VSphereGetAllVMSummary struct {
	Context *middleware.Context
	Handler VSphereGetAllVMSummaryHandler
}

func (o *VSphereGetAllVMSummary) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVSphereGetAllVMSummaryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// VSphereGetAllVMSummaryOKBody v sphere get all VM summary o k body
//
// swagger:model VSphereGetAllVMSummaryOKBody
type VSphereGetAllVMSummaryOKBody struct {

	// count
	Count int64 `json:"count,omitempty"`

	// results
	Results []*VSphereGetAllVMSummaryOKBodyResultsItems0 `json:"results"`
}

// Validate validates this v sphere get all VM summary o k body
func (o *VSphereGetAllVMSummaryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VSphereGetAllVMSummaryOKBody) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vSphereGetAllVmSummaryOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vSphereGetAllVmSummaryOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v sphere get all VM summary o k body based on the context it is used
func (o *VSphereGetAllVMSummaryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VSphereGetAllVMSummaryOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Results); i++ {

		if o.Results[i] != nil {

			if swag.IsZero(o.Results[i]) { // not required
				return nil
			}

			if err := o.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vSphereGetAllVmSummaryOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vSphereGetAllVmSummaryOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *VSphereGetAllVMSummaryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VSphereGetAllVMSummaryOKBody) UnmarshalBinary(b []byte) error {
	var res VSphereGetAllVMSummaryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// VSphereGetAllVMSummaryOKBodyResultsItems0 v sphere get all VM summary o k body results items0
//
// swagger:model VSphereGetAllVMSummaryOKBodyResultsItems0
type VSphereGetAllVMSummaryOKBodyResultsItems0 struct {

	// cpu
	CPU int64 `json:"cpu,omitempty"`

	// guest full name
	GuestFullName string `json:"guestFullName,omitempty"`

	// hardware version
	HardwareVersion string `json:"hardwareVersion,omitempty"`

	// memory m b
	MemoryMB int64 `json:"memoryMB,omitempty"`

	// moref
	Moref string `json:"moref,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number disks
	NumberDisks int64 `json:"numberDisks,omitempty"`

	// number n i cs
	NumberNICs int64 `json:"numberNICs,omitempty"`

	// powerstate
	Powerstate string `json:"powerstate,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this v sphere get all VM summary o k body results items0
func (o *VSphereGetAllVMSummaryOKBodyResultsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v sphere get all VM summary o k body results items0 based on context it is used
func (o *VSphereGetAllVMSummaryOKBodyResultsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VSphereGetAllVMSummaryOKBodyResultsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VSphereGetAllVMSummaryOKBodyResultsItems0) UnmarshalBinary(b []byte) error {
	var res VSphereGetAllVMSummaryOKBodyResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
