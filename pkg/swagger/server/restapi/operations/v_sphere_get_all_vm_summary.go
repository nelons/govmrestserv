// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// VSphereGetAllVMSummaryHandlerFunc turns a function with the right signature into a v sphere get all VM summary handler
type VSphereGetAllVMSummaryHandlerFunc func(VSphereGetAllVMSummaryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VSphereGetAllVMSummaryHandlerFunc) Handle(params VSphereGetAllVMSummaryParams) middleware.Responder {
	return fn(params)
}

// VSphereGetAllVMSummaryHandler interface for that can handle valid v sphere get all VM summary params
type VSphereGetAllVMSummaryHandler interface {
	Handle(VSphereGetAllVMSummaryParams) middleware.Responder
}

// NewVSphereGetAllVMSummary creates a new http.Handler for the v sphere get all VM summary operation
func NewVSphereGetAllVMSummary(ctx *middleware.Context, handler VSphereGetAllVMSummaryHandler) *VSphereGetAllVMSummary {
	return &VSphereGetAllVMSummary{Context: ctx, Handler: handler}
}

/*
	VSphereGetAllVMSummary swagger:route GET /vsphere/{vcenter}/vm/ vSphereGetAllVmSummary

Retrieve a summary of all Virtual Machines from a vCenter Server/ESXi host.
*/
type VSphereGetAllVMSummary struct {
	Context *middleware.Context
	Handler VSphereGetAllVMSummaryHandler
}

func (o *VSphereGetAllVMSummary) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVSphereGetAllVMSummaryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
