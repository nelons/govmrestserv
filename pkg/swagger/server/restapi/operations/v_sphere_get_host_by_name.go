// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// VSphereGetHostByNameHandlerFunc turns a function with the right signature into a v sphere get host by name handler
type VSphereGetHostByNameHandlerFunc func(VSphereGetHostByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VSphereGetHostByNameHandlerFunc) Handle(params VSphereGetHostByNameParams) middleware.Responder {
	return fn(params)
}

// VSphereGetHostByNameHandler interface for that can handle valid v sphere get host by name params
type VSphereGetHostByNameHandler interface {
	Handle(VSphereGetHostByNameParams) middleware.Responder
}

// NewVSphereGetHostByName creates a new http.Handler for the v sphere get host by name operation
func NewVSphereGetHostByName(ctx *middleware.Context, handler VSphereGetHostByNameHandler) *VSphereGetHostByName {
	return &VSphereGetHostByName{Context: ctx, Handler: handler}
}

/*
	VSphereGetHostByName swagger:route GET /vsphere/{vcenter}/host/name/{hostname} vSphereGetHostByName

Retrieve full details from a Host by the name of the host.
*/
type VSphereGetHostByName struct {
	Context *middleware.Context
	Handler VSphereGetHostByNameHandler
}

func (o *VSphereGetHostByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVSphereGetHostByNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
