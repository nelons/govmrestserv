// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VSphereConnectHandlerFunc turns a function with the right signature into a v sphere connect handler
type VSphereConnectHandlerFunc func(VSphereConnectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VSphereConnectHandlerFunc) Handle(params VSphereConnectParams) middleware.Responder {
	return fn(params)
}

// VSphereConnectHandler interface for that can handle valid v sphere connect params
type VSphereConnectHandler interface {
	Handle(VSphereConnectParams) middleware.Responder
}

// NewVSphereConnect creates a new http.Handler for the v sphere connect operation
func NewVSphereConnect(ctx *middleware.Context, handler VSphereConnectHandler) *VSphereConnect {
	return &VSphereConnect{Context: ctx, Handler: handler}
}

/*
	VSphereConnect swagger:route POST /vsphere/connect vSphereConnect

Connect to a vCenter or ESXi Server
*/
type VSphereConnect struct {
	Context *middleware.Context
	Handler VSphereConnectHandler
}

func (o *VSphereConnect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVSphereConnectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// VSphereConnectBadRequestBody v sphere connect bad request body
//
// swagger:model VSphereConnectBadRequestBody
type VSphereConnectBadRequestBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this v sphere connect bad request body
func (o *VSphereConnectBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v sphere connect bad request body based on context it is used
func (o *VSphereConnectBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VSphereConnectBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VSphereConnectBadRequestBody) UnmarshalBinary(b []byte) error {
	var res VSphereConnectBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// VSphereConnectBody v sphere connect body
//
// swagger:model VSphereConnectBody
type VSphereConnectBody struct {

	// allow insecure
	AllowInsecure bool `json:"allow_insecure,omitempty"`

	// A nicename for the connection. If not set, then it is the hostname part of the URL (made unique)
	Name string `json:"name,omitempty"`

	// passthrough
	Passthrough bool `json:"passthrough,omitempty"`

	// password
	// Required: true
	Password *string `json:"password"`

	// url
	// Required: true
	URL *string `json:"url"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this v sphere connect body
func (o *VSphereConnectBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VSphereConnectBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("requestBody"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

func (o *VSphereConnectBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("requestBody"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

func (o *VSphereConnectBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("requestBody"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v sphere connect body based on context it is used
func (o *VSphereConnectBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VSphereConnectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VSphereConnectBody) UnmarshalBinary(b []byte) error {
	var res VSphereConnectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// VSphereConnectOKBody v sphere connect o k body
//
// swagger:model VSphereConnectOKBody
type VSphereConnectOKBody struct {

	// about
	About interface{} `json:"about,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this v sphere connect o k body
func (o *VSphereConnectOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v sphere connect o k body based on context it is used
func (o *VSphereConnectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VSphereConnectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VSphereConnectOKBody) UnmarshalBinary(b []byte) error {
	var res VSphereConnectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
